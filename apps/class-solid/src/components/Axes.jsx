// Code generated by AI and checked/modified for correctness

import { For } from "solid-js";

export const AxisBottom = (props) => {
  const ticks = () => {
    const domain = props.scale.domain();
    const tickCount = props.tickCount || 5;
    const step = (domain[1] - domain[0]) / (tickCount - 1);

    return [...Array(tickCount).keys()].map((i) => {
      const value = domain[0] + i * step;
      return {
        value,
        position: props.scale(value),
      };
    });
  };

  return (
    <g transform={props.transform}>
      <line
        x1={props.scale.range()[0]}
        x2={props.scale.range()[1]}
        y1="0"
        y2="0"
        stroke="currentColor"
      />
      <For each={ticks()}>
        {(tick) => (
          <g transform={`translate(${tick.position}, 0)`}>
            <line y2="6" stroke="black" />
            <text y="9" dy="0.71em" text-anchor="middle">
              {props.format ? props.format(tick.value) : tick.value}
            </text>
          </g>
        )}
      </For>
    </g>
  );
};

export const AxisLeft = (props) => {
  const ticks = () => {
    const domain = props.scale.domain();
    const tickCount = props.tickCount || 5;
    const step = (domain[1] - domain[0]) / (tickCount - 1);

    return [...Array(tickCount).keys()].map((i) => {
      const value = domain[0] + i * step;
      return {
        value,
        position: props.scale(value),
      };
    });
  };

  return (
    <g transform={props.transform}>
      <line
        x1={0}
        x2={0}
        y1={props.scale.range()[0]}
        y2={props.scale.range()[1]}
        stroke="black"
      />
      <For each={ticks()}>
        {(tick) => (
          <g transform={`translate(0, ${tick.position})`}>
            <line x2="-6" stroke="black" />
            <text x="-9" dy="0.32em" text-anchor="end">
              {props.format ? props.format(tick.value) : tick.value}
            </text>
          </g>
        )}
      </For>
    </g>
  );
};
